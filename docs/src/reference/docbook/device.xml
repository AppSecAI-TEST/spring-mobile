<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="device" xmlns:xlink="http://www.w3.org/1999/xlink">
	
	<title>Spring Mobile Device Module</title>
	
	<section id="spring-mobile-device-introduction">
		<title>Introduction</title>
		<para>
			Device detection is useful when requests by mobile devices need to be handled differently from requests made by desktop browsers.
			The Spring Mobile Device module provides support for server-side device detection.
			This support consists of a device resolution framework, site preference management, and site switcher.
	    </para>
	</section>

	<section id="spring-mobile-device-howtoget">
		<title>How to get</title>
		<para>
			Add the spring-mobile-device artifact to your classpath:
			<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.mobile</groupId>
    <artifactId>spring-mobile-device</artifactId>
    <version>${org.springframework.mobile-version}</version>
</dependency>]]>
			</programlisting>
		</para>
	</section>

	<section id="spring-mobile-device-resolution">
		<title>Device resolution</title>
		<para>
			Device resolution is the process of introspecting a HTTP request to determine the device that originated the request.
			It is typically achieved by analyzing the User-Agent header and other request headers.
		</para>
		<para>
			At the most basic level, device resolution answers the question: "Is the client device a mobile device?".
			This answer enables your application to respond differently to mobile devices that have small screens.
			More sophisticated device resolvers are also capable of identifying specific device capabilities, such as screen size, manufacturer, model, or preferred markup.
		</para>
		<para>
			In Spring Mobile, the DeviceResolver interface defines the API for device resolution:
			<programlisting language="java"><![CDATA[
public interface DeviceResolver {

    Device resolveDevice(HttpServletRequest request);
	
}]]>
			</programlisting>
			The returned Device models the result of device resolution:
			<programlisting language="java"><![CDATA[
public interface Device {

    boolean isMobile();

}]]>
			</programlisting>
			As shown above, Device.isMobile() can be used to determine if the client is using a mobile device, such as a smart phone.
			Depending on the DeviceResolver in use, a Device may support being downcast to access additional properties.
		</para>
		<section id="spring-mobile-device-resolver-interceptor">
			<title>When to perform</title>
			<para>
				Web applications should perform device resolution at the beginning of request processing, before any request handler is invoked.
				This ensures the Device model can be made available in request scope before any processing occurs.
				Request handlers can then obtain the Device instance and use it to respond differently based on its state.
	    	</para>
	    	<para>
	    		Spring Mobile ships a HandlerInterceptor that, on preHandle, delegates to a DeviceResolver.
				The resolved Device is indexed under a request attribute named 'currentDevice', making it available to handlers throughout request processing.
	    	</para>
			<para>
				To enable, add the DeviceResolverHandlerInterceptor to the list of interceptors defined in your DispatcherServlet configuration:
				<programlisting language="xml"><![CDATA[
<mvc:interceptors>
    <!-- On pre-handle, resolve the device that originated the web request -->
    <beans:bean class="org.springframework.mobile.device.DeviceResolverHandlerInterceptor" />
</mvc:interceptors>]]>
				</programlisting>
			</para>
			<para>
				By default, the interceptor will use a LiteDeviceResolver for device resolution.
				You may plug-in another DeviceResolver implementation by injecting a constructor argument.
			</para>
		</section>
		<section id="spring-mobile-device-web-argument-resolver">
			<title>Obtaining a reference to the current device</title>
			<para>
				When you need to lookup the current Device in your code, you can do so in several ways.
				If you already have a reference to a ServletRequest or Spring WebRequest, simply use DeviceUtils:
			</para>
			<programlisting language="java"><![CDATA[
Device currentDevice = DeviceUtils.getCurrentDevice(servletRequest);]]>
			</programlisting>
			<para>
				If you need the current Device as an argument to one of your @Controller methods, configure a DeviceWebArgumentResolver:
				<programlisting language="xml"><![CDATA[
<mvc:annotation-driven>
    <mvc:argument-resolvers>
        <beans:bean class="org.springframework.mobile.device.DeviceWebArgumentResolver" />
    </mvc:argument-resolvers>
</mvc:annotation-driven>]]>
				</programlisting>
			</para>
			<para>
				You can then inject the Device into your @Controllers as shown below:
				<programlisting language="java"><![CDATA[
@Controller
public class HomeController {

    private static final Logger logger = LoggerFactory.getLogger(WurflShowcaseController.class);

    @RequestMapping("/")
    public void home(Device device) {
        if (device.isMobile()) {
            logger.info("Hello mobile user!");		
        } else {
            logger.info("Hello desktop user!");			
        }
    }]]>
				</programlisting>
			</para>
		</section>
		<section id="spring-mobile-device-resolvers">
			<title>Supported DeviceResolver implementations</title>
			<para>
				Spring Mobile ships two distinct DeviceResolver implementations that offer varying levels of resolution capability.
				The first, and the default, is a <emphasis>LiteDeviceResolver</emphasis> that detects the presence of a mobile device but does not detect specific capabilities.
				The second is a <emphasis>WurflDeviceResolver</emphasis> that uses the WURFL Java API and device repository to identify a wide range of device capabilities.
			</para>
			<section id="spring-mobile-device-resolvers-lite">
				<title>LiteDeviceResolver</title>
				<para>
					The default DeviceResolver implementation is based on the "lite" <ulink url="http://plugins.trac.wordpress.org/browser/wordpress-mobile-pack/trunk/plugins/wpmp_switcher/lite_detection.php">detection algorithm</ulink> implemented as part of the <ulink url="http://wordpress.org/extend/plugins/wordpress-mobile-pack">Wordpress Mobile Pack</ulink>.
					This resolver only detects the presence of a mobile device and does not detect specific capabilities.
					No special configuration is required to enable this resolver, simply configure a default DeviceResolverHandlerInterceptor and it will be enabled for you.					
				</para>
			</section>
			<section id="spring-mobile-device-resolvers-wurfl">
				<title>WurflDeviceResolver</title>
				<para>
					Spring Mobile ships an alternative DeviceResolver implementation that delegates to WURFL.
					WURFL provides a Java API as well as a large database of devices and their capabilities.
					It is useful when you need to know more about the Device that originated the request, such as its specific screen size, manufacturer, model, preferred markup, or other capabilities.
				</para>
				<para>
					To use, first make sure the WURFL Java API is in your classpath:
					<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>net.sourceforge.wurfl</groupId>
    <artifactId>wurfl</artifactId>
    <version>${net.sourceforge.wurfl-version}</version>
</dependency>]]>
					</programlisting>
				</para>
				<para>
					Then include the spring-mobile-device XML namespace and use the wurfl-device-resolver tag:
					<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:device="http://www.springframework.org/schema/mobile/device"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mobile/device http://www.springframework.org/schema/mobile/device/spring-mobile-device-1.0.xsd">

    <interceptors>
        <!-- On pre-handle, use WURFL to detect the device that originated the web request -->
        <beans:bean class="org.springframework.mobile.device.mvc.DeviceResolverHandlerInterceptor">
            <beans:constructor-arg>
            	<!-- Inject a WurflDeviceResolver that populates the device repository from the specified file locations -->
                <device:wurfl-device-resolver root-location="/WEB-INF/wurfl/wurfl-2.0.25.zip" patch-locations="/WEB-INF/wurfl/web_browsers_patch.xml" />
            </beans:constructor-arg>		
        </beans:bean>
    </interceptors>

</beans:beans>]]>
					</programlisting>
				</para>
				<para>
					Read more about WURFL at <ulink url="http://wurfl.sourceforge.net">http://wurfl.sourceforge.net</ulink>.
					Checkout the <ulink url="http://git.springsource.org/spring-mobile/samples">wurfl-showcase</ulink> for a live demonstration.
					This sample illustrates WURFL-based device detection as well as the use of the WNG tag library to perform multi-serving from common page markup.
				</para>
			</section>	
		</section>
	</section>

	<section id="spring-mobile-site-preference">
		<title>Site preference management</title>
		<section id="spring-mobile-site-preference-indicating">
			<title>Indicating a site preference</title>
			<para>
				The user may indicate a site preference by submitting the site_preference query parameter:
				<programlisting language="xml"><![CDATA[
Site: <a href="${currentUrl}?site_preference=normal">Normal</a> | <a href="${currentUrl}?site_preference=mobile">Mobile</a>
]]>
				</programlisting>
				The indicated site preference is saved for the user in a SitePreferenceRepository, and also made available as a request attribute named 'currentSitePreference'.
				The default SitePreferenceRepository implementation used by the mDot and dotMobi SiteSwitcher factory methods is cookie-based.
				The cookie value is shared across the normal and mobile site domains.
			</para>
		</section>
		<section id="spring-mobile-site-preference-argument-resolver">
			<title>SitePreferenceWebArgumentResolver</title>
			<para>
				The SitePreferenceWebArgumentResolver allows you to inject the user's indicated SitePreference into @Controller handler methods.
				To use, add this resolver to the list of custom WebArgumentResolvers registered with the DispatcherServlet's AnnotationMethodHandlerAdapter infastructure bean:
				<programlisting language="java"><![CDATA[
@Component
public class CustomWebArgumentResolverInstaller {

    @Inject
    public CustomWebArgumentResolverInstaller(AnnotationMethodHandlerAdapter controllerInvoker) {
        WebArgumentResolver[] resolvers = new WebArgumentResolver[2]
        resolvers[0] = new DeviceWebArgumentResolver();
        resolvers[1] = new SitePreferenceArgumentResolver();
        controllerInvoker.setCustomArgumentResolvers(resolvers);
    }
	
}]]>
				</programlisting>
			</para>
			<para>
				You can then inject the indicated SitePreference into your @Controllers as shown below:
				<programlisting language="java"><![CDATA[
@Controller
public class HomeController {

    @RequestMapping("/")
    public String home(SitePreference sitePreference, Model model) {
        if (sitePreference == SitePreference.MOBILE) {
            // prepare mobile view for rendering
            return "home-mobile";
        } else {
            // prepare normal view for rendering
            return "home";
        }
    }

}]]>
				</programlisting>
			</para>	
		</section>
	</section>
	
	<section id="spring-mobile-device-site-switcher-interceptor">
		<title>Site switching</title>
		<para>
			Use the SiteSwitcherHandlerInterceptor to redirect mobile users to a dedicated mobile site.
			Users may also indicate a site preference; for example, a mobile user may still wish to use 'normal' site.
			Convenient static factory methods are provided that implement standard site switching conventions.
		</para>
		<section id="spring-mobile-site-switcher-interceptor-mdot">
			<title>mDot SiteSwitcher</title>
			<para>
				Use the "mDot" factory method to construct a SiteSwitcher that
				redirects mobile users to m.${serverName}; for example, m.myapp.com:
				<programlisting language="xml"><![CDATA[
<interceptors>

    <!-- Redirects mobile users to "m.myapp.com".  The order of this interceptor is significant (it should be declared after the DeviceResolverHandlerInterceptor) -->
    <beans:bean class="org.springframework.mobile.device.switcher.SiteSwitcherHandlerInterceptor" factory-method="mDot">
        <beans:constructor-arg value="myapp.com" />
    </beans:bean>

</interceptors>]]>
				</programlisting>
			</para>
		</section>
		<section id="spring-mobile-site-switcher-interceptor-dotmobi">
			<title>dotMobi SiteSwitcher</title>
			<para>
				Use the "dotMobi" factory method to construct a SiteSwitcher that redirects mobile users to ${serverName - lastDomain}.mobi; for example, myapp.mobi:
				<programlisting language="xml"><![CDATA[
<interceptors>

    <!-- Redirects mobile users to "myapp.mobi".  The order of this interceptor is significant (it should be declared after the DeviceResolverHandlerInterceptor) -->
    <beans:bean class="org.springframework.mobile.device.switcher.SiteSwitcherHandlerInterceptor" factory-method="dotMobi">
        <beans:constructor-arg value="myapp.com" />
    </beans:bean>

</interceptors>]]>
				</programlisting>
			</para>
			<para>
				See the spring-mobile <ulink url="http://git.springsource.org/spring-mobile/samples">samples</ulink> repository for runnable SiteSwitcher examples.
			</para>				
		</section>
	</section>

</chapter>